To build the **Student Management System (API)** using **FastAPI**, **Python**, and **MongoDB Atlas (M0 Free Cluster)**, you need to follow the requirements carefully and ensure the API meets the specifications. Here's a step-by-step guide to implement the API and deploy it.

### **Step 1: Set up MongoDB Atlas**

1. **Create MongoDB Atlas Account:**
   - Go to [MongoDB Atlas](https://www.mongodb.com/cloud/atlas) and create an account if you haven't already.
   - Set up a free-tier cluster (M0).
   - Create a new database for the project (e.g., `student_management_system`).
   - Add a user with `readWrite` permissions for this database.
   - Get the **connection string** (e.g., `mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority`).

2. **MongoDB Collection Setup:**
   - You'll need collections for students, courses, and grades. These will be defined in MongoDB automatically when you perform insert operations.

### **Step 2: Install Dependencies**

Install the necessary Python dependencies:
```bash
pip install fastapi motor pydantic uvicorn
```

- **FastAPI**: Web framework for building APIs.
- **Motor**: Asynchronous driver for MongoDB to integrate with FastAPI.
- **Pydantic**: Data validation and settings management.
- **Uvicorn**: ASGI server to run the FastAPI app.

### **Step 3: Project Structure**

The project will have the following structure:

```
student_management_system/
├── app/
│   ├── __init__.py
│   ├── main.py           # FastAPI application
│   ├── models.py         # Pydantic models and MongoDB schema
│   ├── database.py       # MongoDB connection setup
│   └── schemas.py        # Request and Response schemas
├── requirements.txt      # Python dependencies
└── Dockerfile            # (optional) Docker configuration for deployment
```

### **Step 4: Define MongoDB Database Connection (database.py)**

We'll use **Motor** to connect to MongoDB.

```python
# app/database.py
import motor.motor_asyncio
from bson import ObjectId

# MongoDB connection string (replace <username>, <password>, and <dbname> with your details)
MONGO_URI = "mongodb+srv://<username>:<password>@cluster0.mongodb.net/student_management_system?retryWrites=true&w=majority"
client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)
db = client.student_management_system

# Collections
students_collection = db.students
courses_collection = db.courses
grades_collection = db.grades
```

### **Step 5: Define Pydantic Models (schemas.py)**

Pydantic models define the request and response schemas for the API.

```python
# app/schemas.py
from pydantic import BaseModel, EmailStr
from typing import Optional

# Student Request and Response Schema
class StudentBase(BaseModel):
    name: str
    email: EmailStr
    date_of_birth: str
    address: Optional[str] = None

class StudentCreate(StudentBase):
    pass

class StudentInDB(StudentBase):
    id: str  # MongoDB _id will be converted to id
    class Config:
        orm_mode = True

# Course Request and Response Schema
class CourseBase(BaseModel):
    course_name: str
    course_code: str
    credits: int
    course_description: Optional[str] = None

class CourseCreate(CourseBase):
    pass

class CourseInDB(CourseBase):
    id: str
    class Config:
        orm_mode = True

# Grade Request and Response Schema
class GradeBase(BaseModel):
    student_id: str
    course_id: str
    grade: str

class GradeCreate(GradeBase):
    pass

class GradeInDB(GradeBase):
    id: str
    class Config:
        orm_mode = True
```

### **Step 6: Define FastAPI Endpoints (main.py)**

Here, you will define all the necessary API endpoints for **students**, **courses**, and **grades**.

```python
# app/main.py
from fastapi import FastAPI, HTTPException
from app.database import students_collection, courses_collection, grades_collection
from app.schemas import StudentCreate, StudentInDB, CourseCreate, CourseInDB, GradeCreate, GradeInDB
from bson import ObjectId
from typing import List

app = FastAPI()

# Helper function to convert MongoDB _id to id
def to_str_id(mongo_obj):
    mongo_obj["id"] = str(mongo_obj["_id"])
    del mongo_obj["_id"]
    return mongo_obj

# Student Routes
@app.post("/students/", response_model=StudentInDB)
async def create_student(student: StudentCreate):
    existing_student = await students_collection.find_one({"email": student.email})
    if existing_student:
        raise HTTPException(status_code=400, detail="Student already exists")
    student_dict = student.dict()
    result = await students_collection.insert_one(student_dict)
    created_student = await students_collection.find_one({"_id": result.inserted_id})
    return to_str_id(created_student)

@app.get("/students/{student_id}", response_model=StudentInDB)
async def get_student(student_id: str):
    student = await students_collection.find_one({"_id": ObjectId(student_id)})
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    return to_str_id(student)

@app.get("/students/", response_model=List[StudentInDB])
async def get_all_students():
    students = []
    async for student in students_collection.find():
        students.append(to_str_id(student))
    return students

@app.put("/students/{student_id}", response_model=StudentInDB)
async def update_student(student_id: str, student: StudentCreate):
    updated_student = await students_collection.find_one({"_id": ObjectId(student_id)})
    if not updated_student:
        raise HTTPException(status_code=404, detail="Student not found")
    
    await students_collection.update_one({"_id": ObjectId(student_id)}, {"$set": student.dict()})
    updated_student = await students_collection.find_one({"_id": ObjectId(student_id)})
    return to_str_id(updated_student)

@app.delete("/students/{student_id}", response_model=StudentInDB)
async def delete_student(student_id: str):
    student = await students_collection.find_one({"_id": ObjectId(student_id)})
    if not student:
        raise HTTPException(status_code=404, detail="Student not found")
    await students_collection.delete_one({"_id": ObjectId(student_id)})
    return to_str_id(student)

# Course Routes
@app.post("/courses/", response_model=CourseInDB)
async def create_course(course: CourseCreate):
    existing_course = await courses_collection.find_one({"course_code": course.course_code})
    if existing_course:
        raise HTTPException(status_code=400, detail="Course already exists")
    course_dict = course.dict()
    result = await courses_collection.insert_one(course_dict)
    created_course = await courses_collection.find_one({"_id": result.inserted_id})
    return to_str_id(created_course)

@app.get("/courses/{course_id}", response_model=CourseInDB)
async def get_course(course_id: str):
    course = await courses_collection.find_one({"_id": ObjectId(course_id)})
    if not course:
        raise HTTPException(status_code=404, detail="Course not found")
    return to_str_id(course)

@app.get("/courses/", response_model=List[CourseInDB])
async def get_all_courses():
    courses = []
    async for course in courses_collection.find():
        courses.append(to_str_id(course))
    return courses

# Grade Routes
@app.post("/grades/", response_model=GradeInDB)
async def create_grade(grade: GradeCreate):
    existing_grade = await grades_collection.find_one({"student_id": grade.student_id, "course_id": grade.course_id})
    if existing_grade:
        raise HTTPException(status_code=400, detail="Grade already exists for this student in this course")
    grade_dict = grade.dict()
    result = await grades_collection.insert_one(grade_dict)
    created_grade = await grades_collection.find_one({"_id": result.inserted_id})
    return to_str_id(created_grade)

@app.get("/grades/{grade_id}", response_model=GradeInDB)
async def get_grade(grade_id: str):
    grade = await grades_collection.find_one({"_id": ObjectId(grade_id)})
    if not grade:
        raise HTTPException(status_code=404, detail="Grade not found")
    return to_str_id(grade)

@app.get("/grades/student/{student_id}", response_model=List[GradeInDB])
async def get_grades_for_student(student_id: str):
    grades = []
    async for grade in grades_collection.find({"student_id": student_id}):
        grades.append(to_str_id(grade))
    return grades
```

### **Step 7: Run FastAPI Application**

Use **Uvicorn** to run your FastAPI app:

```bash
uvicorn app.main:app --reload
```

### **Step 8: Deploying the Application**

To deploy your FastAPI app, you can choose platforms like:
- **Render**: Free hosting for FastAPI apps.
- **Heroku**: Free tier hosting for FastAPI apps.
- **AWS EC2** (Free Tier): Host FastAPI on a virtual machine.
- **Google Cloud Platform** (Free Tier): Host on a virtual machine.
  
For example, using **Render**, you can deploy your
